 What really NodeJS does when you try to deal with the files using the FS module.

There are three different ways in nodejs to deal with files(create a file , delete a file,etc...)
    1.Promises API
    2.Callback API
    3.Synchronous API.


We have these three ways of doing the same thing.

How do they differ?
in terms of functionality, they don't.
Meaning that if you want to delete a file, it doesn't matter if you use the promise API or the callback
API or the other one, the file is actually going to get deleted.
In terms of how they do it, well it's a little bit different.

Now you might be asking how and which one of these should I use in my applications.
Now to answer your question, I should say that in general, maybe 90% of the time or 99% of the time,
especially when you're just starting out, stick with the promises API.
Okay, so if you're just starting out, use the promises API as much as you possibly could.
It's a lot cleaner.

And when you really want to have the maximum amount of performance,
Now, in very rare cases, when you're doing something really complex and it takes a ton amount of CPU
computational power, in those cases, you might want to stick with the callback API.
And I'm saying this actually based on what Node.js documentation says.
It says callback API in the file system module is faster than the promises API, and use this callback
version when performance is really critical to you and you want to have the maximum amount of it.

Now about the synchronous API, you just try to stay away from it as much as you possibly could.
Only use it when you're dead sure that you have to use it.
For example, one case that you might want to use it is that you are trying to read a configuration
file before you actually start your application.
So you need some of the data in that configuration file to really start your application.
And without them, you can't proceed.
You can't really run your application and you're going to run into so many different errors.
So in a case like that, and it's actually going to happen only once when you're starting your application,
it makes sense to use the synchronous API.


 Promises API and callback API are a lot faster than Synchronous API
Actually, they're not faster.
But what happens is that when you are using the synchronous API, you are blocking your main thread.
So for example, if someone is uploading a file and you are saving the file using the synchronous API,
when someone starts to upload a file, your whole application will freeze.
So if you're running only one instance of your NodeJS application, only one process, that process
is going to get freezed until it's done with the uploading, which is of course not ideal and you don't
want that to happen.

